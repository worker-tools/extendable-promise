{"version":3,"file":"index.js","sourceRoot":"","sources":["src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,kCAAkC,CAAC;AAErE,yEAAyE;AACzE,gCAAgC;AAChC,8GAA8G;AAE9G,MAAM,OAAO,iBAAiB;IAC5B,OAAO,GAA8B,EAAE,CAAC;IACxC,QAAQ,CAA+C;IACvD,SAAS,GAAG,CAAC,CAAC;IACd,WAAW,GAAG,CAAC,CAAC;IAEhB,YAAY,CAAsB;QAChC,mCAAmC;QACnC,IAAI,CAAC,QAAQ,GAAG,IAAI,iBAAiB,EAAE,CAAC;QACxC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAClB,yBAAyB;QACzB,gCAAgC;QAChC,iCAAiC;QACjC,MAAM;QACN,MAAM;IACR,CAAC;IAED,QAAQ,CAAC,CAAS,EAAE,KAAQ;QAC1B,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;QACjD,IAAI,EAAE,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,SAAS,EAAE;YACzC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACrC;IACH,CAAC;IAAA,CAAC;IAEF,OAAO,CAAC,CAAS,EAAE,MAAW;QAC5B,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;QACjD,IAAI,EAAE,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,SAAS,EAAE;YACzC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACrC;IACH,CAAC;IAAA,CAAC;IAEF,SAAS,CAAC,CAAsB;QAC9B,IAAI,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,KAAK,aAAa,IAAU,UAAW,CAAC,KAAK,EAAE;YAClF,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;gBACzB,OAAO,CAAC,IAAI,CAAC,qFAAqF,CAAC,CAAC;aACrG;SACF;QACD,IAAI,CAAC,EAAE;YACL,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;YACvB,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;iBACf,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;YAC1D,IAAI,CAAC,SAAS,EAAE,CAAC;SAClB;IACH,CAAC;IAAA,CAAC;IAEF,IAAI,OAAO,KAAK,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAA,CAAC,CAAC;IAE9C,IAAI,CAAyD,WAA6F,EAAE,UAAuE;QACjO,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IACrD,CAAC;IACD,KAAK,CAAkB,UAAqE;QAC1F,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACzC,CAAC;IACD,OAAO,CAAC,SAA+B;QACrC,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IACD,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,OAAO,mBAAmB,CAAA,CAAC,CAAC;CAC1D;AAED,iCAAiC;AACjC,gEAAgE","sourcesContent":["import { ResolvablePromise } from '@worker-tools/resolvable-promise';\n\n// const queueMicrotask = typeof globalThis.queueMicrotask === \"function\"\n//   ? globalThis.queueMicrotask\n//   : (callback: VoidFunction) => Promise.resolve().then(callback).catch(e => setTimeout(() => { throw e }));\n\nexport class ExtendablePromise<T = unknown> /* extends Promise<T[]> */ implements Promise<PromiseSettledResult<T>[]> {\n  #values: PromiseSettledResult<T>[] = [];\n  #promise: ResolvablePromise<PromiseSettledResult<T>[]>;\n  #numAdded = 0;\n  #numSettled = 0;\n\n  constructor(f?: T | PromiseLike<T>) {\n    // super(r => r(undefined as any));\n    this.#promise = new ResolvablePromise();\n    this.waitUntil(f);\n    // queueMicrotask(() => {\n    //   if (this.#numAdded === 0) {\n    //     this.#promise.resolve([]);\n    //   }\n    // });\n  }\n\n  #fulfill(i: number, value: T) {\n    this.#values[i] = { status: 'fulfilled', value };\n    if (++this.#numSettled === this.#numAdded) {\n      this.#promise.resolve(this.#values);\n    }\n  };\n\n  #reject(i: number, reason: any) {\n    this.#values[i] = { status: 'rejected', reason };\n    if (++this.#numSettled === this.#numAdded) {\n      this.#promise.resolve(this.#values);\n    }\n  };\n\n  waitUntil(f?: T | PromiseLike<T>) {\n    if (globalThis.process?.env?.NODE_ENV === 'development' || (<any>globalThis).DEBUG) {\n      if (this.#promise.settled) {\n        console.warn(\"Can't add promise to an ExtendablePromise that has already settled. This is a no-op\");\n      }\n    }\n    if (f) {\n      let i = this.#numAdded;\n      Promise.resolve(f)\n        .then(v => this.#fulfill(i, v), r => this.#reject(i, r))\n      this.#numAdded++;\n    }\n  };\n\n  get settled() { return this.#promise.settled }\n\n  then<TResult1 = PromiseSettledResult<T>[], TResult2 = never>(onfulfilled?: ((value: PromiseSettledResult<T>[]) => TResult1 | PromiseLike<TResult1>) | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null): Promise<TResult1 | TResult2> {\n    return this.#promise.then(onfulfilled, onrejected);\n  }\n  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null): Promise<PromiseSettledResult<T>[] | TResult> {\n    return this.#promise.catch(onrejected);\n  }\n  finally(onfinally?: (() => void) | null): Promise<PromiseSettledResult<T>[]> {\n    return this.#promise.finally(onfinally);\n  }\n  get [Symbol.toStringTag]() { return 'ExtendablePromise' }\n}\n\n// TODO: Not good for performance\n// ExtendablePromise.prototype = Object.getPrototypeOf(Promise);\n"]}